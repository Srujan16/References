1) WebSocket does imply a messaging architecture but does not mandate the use of any specific messaging protocol.

2) In the WebSocket protocol there is simply not enough information in an incoming message for a framework or container to know how to route it or process it. It can be done, but it will likely lead to creating a framework on top. This is comparable to how most web applications today are written using a web framework rather than the Servlet API alone. For this reason the WebSocket RFC defines the use of sub-protocols. 
The use of a sub-protocol is not required, but even if not used, applications will still need to choose a message format that both the client and server can understand.	 

3) It is the combination of both low latency and high frequency of messages that can make the use of the WebSocket protocol critical. Even in such applications, the choice remains whether all client-server communication should be done through WebSocket messages as opposed to using HTTP and REST.

4) During the handshake, the client and server can use the header Sec-WebSocket-Protocol to agree on a sub-protocol, i.e. a higher, application-level protocol to use. The use of a sub-protocol is not required, but even if not used, applications will still need to choose a message format that both the client and server can understand. 

WebSockets in SpringFramework :
------------------------------
	1) The Spring Framework allows @Controller and @RestController classes to have both HTTP request handling and WebSocket message handling methods.  A Spring MVC request handling method, or any application method for that matter, can easily broadcast a message to all interested WebSocket clients or to a specific user.


	Spring Websocket api server support versions :
	
		 1) Tomcat 7.0.47+
		 2) Jetty 9.1+
		 3) GlassFish 4.1+
		 4) WebLogic 12.1.3+  

 Note **:

	 Until assumptions are made about the format of a message there is little a framework can do to interpret messages or route them via annotations. This is why applications should consider using a sub-protocol and Spring’s STOMP over WebSocket support.	



	WebSocketHandler:
	----------------
	implement WebSocketHandler  (or) extend TextWebSocketHandler/BinaryWebSocketHandler

	There is dedicated WebSocket Java-config and XML namespace support for mapping the above WebSocket handler to a specific URL.

		<websocket:handlers>
       			 <websocket:mapping path="/myHandler" handler="myHandler"/>
    		</websocket:handlers>

        * Above configuration should be included in the configuration of a DispatcherServlet.

	HandShake Interceptors:	
	----------------------
	 Way to customize the initial HTTP WebSocket handshake request is through a HandshakeInterceptor, which exposes "before" and "after" 		 the handshake methods.

		<websocket:handlers>
		        <websocket:mapping path="/myHandler" handler="myHandler"/>
		        <websocket:handshake-interceptors>
		            <bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
		        </websocket:handshake-interceptors>
	       </websocket:handlers>


	WebSocket Decorators:
	---------------------
	 WebSocketHandlerDecorator base class that can be used to decorate a WebSocketHandler with additional behavior.

	 ExceptionWebSocketHandlerDecorator catches all uncaught exceptions arising from any WebSocketHandler method and closes the WebSocket 		 session with status 1011 that indicates a server error.
	
	Deployment:
	-----------
	The Spring WebSocket API is easy to integrate into a Spring MVC application where the DispatcherServlet serves both HTTP WebSocket 		handshake as well as other HTTP requests. 
	It is also easy to integrate into other HTTP processing scenarios by invoking WebSocketHttpRequestHandler.	

	1) The first involves a Servlet container classpath scan (Servlet 3 feature) at startup;
	2) registration API to use at Servlet container initialization.
	
	Configuring WebSocket Enginee:
	------------------------------
	Each underlying WebSocket engine exposes configuration properties that control runtime characteristics such as the size of message 		buffer sizes, idle timeout, and others.

	For Tomcat, WildFly, and GlassFish add a ServletServerContainerFactoryBean to your WebSocket Java config:

		<bean class="org.springframework...ServletServerContainerFactoryBean">
		        <property name="maxTextMessageBufferSize" value="8192"/>
		        <property name="maxBinaryMessageBufferSize" value="8192"/>
	        </bean>

	* For client side WebSocket configuration, you should use WebSocketContainerFactoryBean

	Setting Allowed origins:
	------------------------
	 <websocket:handlers allowed-origins="http://mydomain.com">
	        <websocket:mapping path="/myHandler" handler="myHandler" />
	    </websocket:handlers>

        FallBack options:
	----------------
	The goal of SockJS is to let applications use a WebSocket but fall back API to non-WebSocket alternatives when necessary at runtime, 		i.e. without the need to change application code.	

